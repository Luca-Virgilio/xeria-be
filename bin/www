#!/usr/bin/env node

/**
 * Module dependencies.
 */

const main = async _ => {
  const app = require('../app');
  const debug = require('debug')('v-monero-be:server');
  const http = require('http');

  require('onnxjs');
  // Use package 'onnxjs-node' to load ONNXRuntime backend.
  require('onnxjs-node');


  const {createSalt} = require('../app_api/lib/pdkdf2')
  const assert = require('assert');

  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  // -------- CODE BEFORE START SERVER ----------
 

  await createSalt();

  session = new onnx.InferenceSession({backendHint: 'onnxruntime'});
  session2 = new onnx.InferenceSession({ backendHint: 'onnxruntime' });

  // Load an ONNX model. This model is Resnet50 that takes a 1*3*224*224 image and classifies it.
  await session2.loadModel("/home/luca/Scrivania/code/xeria-be/app_api/lib/resnet50_8.onnx");

  // Load an ONNX model. This model takes two tensors of the same size and return their sum.
  await session.loadModel('/home/luca/Scrivania/code/xeria-be/app_api/lib/add.onnx');


  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

main()